# SPDX-License-Identifier: 0BSD
################################################################################
# TOOLS
#
# [R]: Variable can be redefined with a single value.
# [+]: Variable can be redefined and/or have values added to it.
# [X]: Variable must not be redefined nor have values added to it.
################################################################################
# List of commands to be run by the `analyze`, `cov` and `doc` targets.      [+]
# Commands must be added like this: <TARGET>_CMD += && <cmd>
# Existence of a tool should be tested before adding it to a `<TARGET>_CMD`
# variable to prevent errors when running make.
ANALYZE_STATIC_CMD := true
COV_CMD := true
DOC_CMD := true
# List of directories to be created by the `analyze_static`, `cov` and `doc` [+]
# to create output directories when necessary.
ANALYZE_STATIC_DIR_DEPS :=
COV_DIR_DEPS :=
DOC_DIR_DEPS :=
################################################################################
# CPPCHECK
################################################################################
# Output path for data generated by cppcheck                                 [R]
CPPCHECK_PATH_OUT = $(ANALYSIS_PATH)/cppcheck
# Executable name                                                            [R]
CPPCHECK_EXEC := cppcheck
# Cppcheck command ran by the `analysis` target                              [+]
CPPCHECK_CMD = $(CPPCHECK_EXEC)
# Enable all checks
CPPCHECK_CMD += --enable=all
CPPCHECK_CMD += --force
# Allow reports even if the analysis is inconclusive
CPPCHECK_CMD += --inconclusive
CPPCHECK_CMD += --language=c
CPPCHECK_CMD += --output-file=$(CPPCHECK_PATH_OUT)/cppcheck
CPPCHECK_CMD += --platform=native
# Don't show progress reports
CPPCHECK_CMD += --quiet
CPPCHECK_CMD += --std=c11
# Don't show messages about not finding standard library headers
CPPCHECK_CMD += --suppress=missingIncludeSystem
CPPCHECK_CMD += --verbose
CPPCHECK_CMD += -I./$(INC_PATH)
CPPCHECK_CMD += -I./$(EXT_PATH) .
ifneq ($(shell which $(CPPCHECK_EXEC)),)
ANALYZE_STATIC_CMD += && $(CPPCHECK_CMD)
ANALYZE_STATIC_DIR_DEPS += $(CPPCHECK_PATH_OUT)
endif
################################################################################
# DOXYGEN
################################################################################
# Output path for data generated by doxygen                                  [R]
DOXYGEN_PATH_OUT = $(DOC_PATH)/doxygen
# Executable name                                                            [R]
DOXYGEN_EXEC := doxygen
# Doxygen command ran by the `doc` target                                    [+]
DOXYGEN_CMD = doxygen
ifneq ($(shell which $(DOXYGEN_EXEC)),)
DOC_CMD += && $(DOXYGEN_CMD)
DOC_DIR_DEPS += $(DOXYGEN_PATH_OUT)
endif
################################################################################
# GCOV
################################################################################
# Set gcov version to the same as the gcc one.                               [X]
GCOV_EXEC = gcov$(lastword $(subst -, -,$(CC)))
################################################################################
# LCOV
################################################################################
# Output path for data generated by lcov                                     [R]
LCOV_PATH_OUT = $(ANALYSIS_PATH)/lcov
# Executable name                                                            [R]
LCOV_EXEC := lcov
# Lcov command                                                               [+]
LCOV_CMD = $(LCOV_EXEC)
# Capture coverage data
LCOV_CMD += --capture
# Use current directory as base for relative paths
LCOV_CMD += --directory .
# Path to the appropriate gcov executable
LCOV_CMD += --gcov-tool $(GCOV_EXEC)
# Don't include external source files
LCOV_CMD += --no-external
# Don't print progress messages
LCOV_CMD += --quiet
# Capture branch coverage
LCOV_CMD += --rc lcov_branch_coverage=1
# Make a first pass to establish a baseline with 0 coverage.
LCOV_INITIAL  = $(LCOV_CMD)
LCOV_INITIAL += --initial
LCOV_INITIAL += -o $(LCOV_PATH_OUT)/test_main_initial.info
# Make the actual capture run
LCOV_RUN  = $(LCOV_CMD)
LCOV_RUN += -o $(LCOV_PATH)/test_main_run.info
# Combine baseline and run
LCOV_FINAL  = $(LCOV_EXEC)
LCOV_FINAL += -a $(LCOV_PATH_OUT)/test_main_initial.info
LCOV_FINAL += -a $(LCOV_PATH_OUT)/test_main_run.info
LCOV_FINAL += -o $(LCOV_PATH_OUT)/test_main_final.info
# Executable name                                                            [R]
GENHTML_EXEC := genhtml
# Generate html report                                                       [+]
GENHTML_CMD = $(GENHTML_EXEC)
GENHTML_CMD += --legend
GENHTML_CMD += --quiet
GENHTML_CMD += --show-details
GENHTML_CMD += -o $(LCOV_PATH_OUT) $(LCOV_PATH_OUT)/test_main_final.info
ifneq ($(and \
    $(shell which $(GCOV_EXEC)), \
    $(shell which $(LCOV_EXEC)), \
    $(shell which $(GENHTML_EXEC)) \
),)
# Command ran by the `cov` target                                            [+]
COV_CMD += && $(LCOV_INITIAL)
COV_CMD += && $(RUN_CMD)
COV_CMD += && $(LCOV_RUN)
COV_CMD += && $(LCOV_FINAL)
COV_CMD += && $(GENHTML_CMD)
COV_DIR_DEPS += $(LCOV_PATH_OUT)
endif
################################################################################
# SCANBUILD
################################################################################
# Output path for data generated by scanbuild                                [R]
SCANBUILD_PATH_OUT = $(ANALYSIS_PATH)/scanbuild
# Executable name                                                            [R]
SCANBUILD_EXEC := scan-build
# Scanbuild command ran by the `analysis` target                             [+]
SCANBUILD_CMD  = $(SCANBUILD_EXEC)
SCANBUILD_CMD += -analyze-headers
SCANBUILD_CMD += -o $(SCANBUILD_PATH_OUT)
SCANBUILD_CMD += make --silent all
ifneq ($(shell which $(SCANBUILD_EXEC)),)
ANALYZE_STATIC_CMD += && $(SCANBUILD_CMD)
ANALYZE_STATIC_DIR_DEPS += $(SCANBUILD_PATH_OUT)
endif
################################################################################
# VALGRIND
################################################################################
# Output path for data generated by valgrind                                 [R]
VALGRIND_PATH_OUT = $(ANALYSIS_PATH)/valgrind
# Executable name                                                            [R]
VALGRIND_EXEC := valgrind
# Valgrind command ran by the `analysis` target                              [+]
VALGRIND_CMD  = $(VALGRIND_EXEC)
VALGRIND_CMD += --leak-check=full
VALGRIND_CMD += --show-leak-kinds=all
VALGRIND_CMD += --track-origins=yes
VALGRIND_CMD += $(PROGRAM_PATH) 2> $(VALGRIND_PATH_OUT)/valgrind
################################################################################
# PKGCONFIG
################################################################################
# Name of the pkg-config file(*.pc)                                          [X]
PKG_PC_NAME = $(PROJECT).pc
# Installation path for the pkg-config file(*.pc)                            [X]
PKG_PC_INSTALL_PATH = $(libdir)/pkgconfig
# Target for the pkg-config file header template                             [X]
PKG_HEADER_TARGET = $(MAKEFILE_PATH)/project.pc.in
# Create a pkg-config file(*.pc) by taking a template file (*pc.in) and replace
# all the `@variable@` with an actual value.
# `|` is used instead of `/` otherwise sed will fail when variables contain a
# `/` which is almost always the case with paths(=> 's/@prefix@//usr/local/').
PKG_PC_IN = sed \
-e 's|@PREFIX@|$(prefix)|' \
-e 's|@EXEC_PREFIX@|$(exec_prefix)|' \
-e 's|@INCLUDEDIR@|$(includedir)|' \
-e 's|@LIBDIR@|$(libdir)|' \
-e 's|@NAME@|$(PROJECT)|' \
-e 's|@DESCRIPTION@|$(DESCRIPTION)|' \
-e 's|@URL@||' \
-e 's|@VERSION@|$(VERSION)|' \
-e 's|@REQUIRES@||' \
-e 's|@REQUIRES_PRIVATE@||' \
-e 's|@CONFLICTS@||' \
-e 's|@LIBS@||' \
-e 's|@LIBS_PRIVATE@||' \
-e 's|@CFLAGS@||' \
$@ > $(PKG_PC_NAME)
