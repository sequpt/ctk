################################################################################
# PROJECT
#
# [R]: Single value variable can be redefined in other makefiles
# [+]: Values can be added to the variable in other makefiles
# [X]: Variable must not be redefined nor values be added to it
################################################################################
# Project name: must not contain spaces                                      [R]
PROJECT = untitled
# Project type: one of [program, shared, static]                             [R]
PROJECT_TYPE := program
# Incompatible API changes                                                   [R]
VERSION_MAJOR = 0
# Functionality in a backwards compatible manner added                       [R]
VERSION_MINOR = 1
# Backwards compatible bug fixes                                             [R]
VERSION_PATCH = 0
# Full version(default to 0.1.0)                                             [X]
VERSION = $(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_PATCH)
# Build mode(default to debug)                                               [R]
# Set build mode to release at runtime with 'make <target> BUILD_MODE=release'
BUILD_MODE ?= debug
# Output folder for analysis tools like valgrind or scan-build               [X]
ANALYSIS_PATH := analysis
# Output folder for executables, *.a, *.so, etc                              [X]
BUILD_PATH = build/$(BUILD_MODE)
# Output folder for *.d files                                                [X]
DEP_PATH := dep
# Output folder for documentation generated by tools like doxygen            [X]
DOC_PATH := doc
# Input folder for *.h files                                                 [X]
INC_PATH := include
# Output folder for *.o files                                                [X]
OBJ_PATH = obj/$(BUILD_MODE)
# Input folder for *.c files                                                 [X]
SRC_PATH := src
# Input folder for *.c files                                                 [X]
TEST_PATH := test
# Name of the program to build                                               [R]
PROGRAM_NAME = $(PROJECT)
# Output folder for the project program                                      [X]
PROGRAM_PATH = $(BUILD_PATH)/$(PROGRAM_NAME)
# Name of the library to build(static or shared)                             [R]
LIB_NAME = $(PROJECT)
# libfoo.so                                                                  [X]
LIB_SHARED = lib$(LIB_NAME).so
# libfoo.so.1                                                                [X]
LIB_SHARED_X = $(LIB_SHARED).$(VERSION_MAJOR)
# libfoo.so.1.2.3                                                            [X]
LIB_SHARED_XYZ = $(LIB_SHARED).$(VERSION)
# Name of the static build to build                                          [X]
LIB_STATIC = lib$(LIB_NAME).a
# Output folder for the project libfoo.so                                    [X]
LIB_SHARED_PATH = $(BUILD_PATH)/$(LIB_SHARED)
# Output folder for the project libfoo.so.1                                  [X]
LIB_SHARED_X_PATH = $(BUILD_PATH)/$(LIB_SHARED_X)
# Output folder for the project libfoo.so.1.2.3                              [X]
LIB_SHARED_XYZ_PATH = $(BUILD_PATH)/$(LIB_SHARED_XYZ)
# Output folder for the project program                                      [X]
LIB_STATIC_PATH = $(BUILD_PATH)/$(LIB_STATIC)
# Prefix of the headers/library install path                                 [R]
INSTALL_PREFIX := /usr/local
# Path where to install headers                                              [X]
HEADER_INSTALL_PATH = $(INSTALL_PREFIX)/include/$(LIB_NAME)
# Path where to install library                                              [X]
LIB_INSTALL_PATH = $(INSTALL_PREFIX)/lib/$(LIB_NAME)
# Input folder for third-parties sources, libraries, tools, etc              [X]
EXTERNAL_PATH := external
# Input folder for third-parties headers                                     [X]
EXTERNAL_INC_PATH := $(EXTERNAL_PATH)/include
# Input folder for third-parties libraries                                   [X]
EXTERNAL_LIB_PATH := $(EXTERNAL_PATH)/lib
# List of directories containing third-parties libraries                     [+]
EXTERNAL_LIB_DIRS = $(shell find $(EXTERNAL_LIB_PATH)/ -type d)
# Output folder for third-parties                                            [X]
EXTERNAL_INSTALL_PREFIX := $(CURDIR)/$(EXTERNAL_PATH)
# Command to invoke submakes in external folder                              [X]
EXTERNAL_SUBMAKE := $(MAKE) -C $(EXTERNAL_PATH)
# List of directories containing *.h files                                   [+]
INC_DIRS := $(INC_PATH)
INC_DIRS += $(EXTERNAL_PATH)
INC_DIRS += $(EXTERNAL_INC_PATH)
# List of directories containing *.c files                                   [+]
SRC_DIRS = $(shell find $(SRC_PATH)/ -type d)
# Paths in which to look for source files in rules like %.o: %.c             [X]
# Modify SRC_DIRS if other directories must be added to VPATH
VPATH = $(SRC_DIRS)
# List of *.c files                                                          [+]
SRC_FILES = $(sort $(shell find $(SRC_DIRS) -name '*.c' -type f))
# Change .c extension to .o and remove directory-part(path/to/foo.c => foo.o)[X]
OBJ_FILES_PASS1 = $(notdir $(SRC_FILES:.c=.o))
# Prefix all files with $(OBJ_PATH)(foo.o => ./obj/debug/foo.o)              [+]
OBJ_FILES = $(OBJ_FILES_PASS1:%=$(OBJ_PATH)/%)
# Change .o extension to .d(foo.o => foo.d)                                  [X]
DEP_FILES_PASS1 = $(OBJ_FILES_PASS1:.o=.d)
# Prefix all files all with $(DEP_PATH)(foo.d => ./dep/foo.d)                [X]
DEP_FILES = $(DEP_FILES_PASS1:%=$(DEP_PATH)/%)
# Dependencies for %.o: %.c rule                                             [X]
OBJ_DEPS = $(DEP_PATH)/%.d | $(OBJ_PATH) $(DEP_PATH)
